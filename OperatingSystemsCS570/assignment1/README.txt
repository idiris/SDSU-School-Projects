John Ervin (Edoras acct # cssc 1137)Mohammad Sharif [available for testing in the turn in on Blackboard and in the README file](Edoras acct # cssc 1135)COURSE INFORMATION:Prof- Guy LeonardCourse- CS 570 Session- Summer 2017 Assignment 1 : Managing Multiple threadsFile Name: README.txtFILE MANIFEST (name of all files included in this project):1. README.txt2. assign1.cpp3. assign1.h4. MakefileCOMPILE INSTRUCTIONS:Compile the program and execute it on Edoras using the gcc, or g++ compiler. Go into the a1 sub directory for the source files. and there are sufficient comments that make the source easy to read. Review the comments for help and then run the Makefile (In the cmd line enter make then press enter) which will create an executable named "bots" in this same directory (~/a1). OPERATING INSTRUCTIONS: In order to operate our program you must enter “make” in the command line, the program will create the bots executable. Then the user must enter “./bots” in the command line of the current working directory. When you enter “make” then “./bots” in order as command line entries, the program creates 7 threads using the POSIX version of threads. Then the program will block/wait for all seven threads to complete their work. The program will handle the rest. Once all threads are complete, the semaphore is destroyed, and then it exits gracefully, and prints “The program has completed” to the console. You can then navigate the current working directory to check the QUOTE.txt to ensure the output came out in order, with no corruption from other bots.ADDITIONAL NOTES:Each thread is running concurrently and perform periodically (even numbered threads - once every two seconds, odd numbered threads – once every 3 seconds). Then we get the semaphore FLAG; once the thread has FLAG, it will proceed to Open the file QUOTE.txt and write the thread’s tid (thread id) followed by the bots quote. Then, we write to the console “Thread <thread id> is running.” The program will close the file QUOTE.txt and Release the semaphore FLAG. We did this process 7 times and then exited gracefully. To the best of our knowledge there are no known deficiencies or bugs in our a1 project. Additionally, we used the following POSIX system calls for creating and managing the semaphores with: sem_init(), sem_wait(), sem_post(), and sem_destroy(). LESSON LEARNED:Our program implemented bots that each run in their own thread simultaneously but not asynchronously with each other. We learned to managed the bots to execute a timed thread and print out quotes by Brian Kernigan, and Edsger Dijkstra to a shared file named QUOTE.txt. In this process, we also learned to use an appropriate IPC mechanism/algorithm to prevent data from getting corrupted by the other bot. We tested this implementation by running the program and checking that the output file QUOTE.txt properly received quotes from both bots that printed alternatively because we implemented an even-odd algorithm to determine which bot gets to write.   